// This is a test file for class inheritance in Rust.

/*
// ---------------------------------------------------------------------------------------
class Animal {
    fun bark() {
        print "Animal is barking.";
    }
}

class Dog : Animal {}

var dog = Dog();
dog.bark(); // Output: Animal is barking.

class Cat : Animal {
    fun meow() {
        print "Cat is meowing.";
    }
}

var cat = Cat();
cat.bark(); // Output: Animal is barking.
cat.meow(); // Output: Cat is meowing.
// ---------------------------------------------------------------------------------------
class Animal {
    fun init(this) {
        this.name = "Animal";
        this.age = 0;
    }

    fun bark() {
        print "Animal is barking.";
    }
}

class Dog : Animal {}

var dog = Dog();
dog.bark(); // Output: Animal is barking.
var dog_func = dog.bark;
dog_func(); // Output: Animal is barking.

print dog.name; // Output: Animal
print dog.age; // Output: 0


class Cat : Animal {
    fun init(this) {
        
        this.name = "Cat";
        this.age = 1;
    }

    fun meow() {
        print "Cat is meowing.";
    }
}

var cat = Cat();
cat.bark(); // Output: Animal is barking.
cat.meow(); // Output: Cat is meowing.

print cat.name; // Output: Cat
print cat.age; // Output: 1
// ---------------------------------------------------------------------------------------
class A {
  fun method() {
    print "A method";
  }
}

class B : A {
  fun method() {
    print "B method";
  }

  fun test(this) {      // test method to call A.method()
    super.method();
  }
}

class C : B {}

C().test();     // Output: A method
*/
class A {
  var name = "A";
  fun method() {
    print "A method";
  }
  fun name(this) {
    print this.name;
  }
}

class B : A {
  fun method() {
    print "B method";
  }

  fun test(this) {      // test method to call A.method()
    print super.name();
    super.method();
  }
}

class C : B {}


fun main() {
    var c = C();
    c.test();     // Output: A method
    c.method();   // Output: B method

  // visit static method of A
  A.method();          // Output: A
  print A().name;      // Output: A
  // A().name();            // error: variable 'name' shadow method 'name'.
}

main();

/*
- 递归下降分析
varStmt: "var" ("mut")? IDENTIFIER (":" type)? ("=" expr)? ";"
  ps: var name: String = "Alice";
      var mut age: i32 = 25;
      
      name = "Bob";     // error: don't modify constant 'name'.
      age = 30;         // success: modify mutable 'age'.

      print name;       // Output: Bob
      print age;        // Output: 30

AssignExpr: expr "=" expr ("=" expr)?* ";"
  ps: var mut x = 10;
      var mut y = 20;
      x = y = 30;      // success: assign to multiple variables.
      x = 30 = 40;     // error: can't assign to the same variable twice.
  
怎么解决在匹配varStmt 时，会错误的匹配AssignExpr ?
*/
