// This is a test file for return statement in joker language.

/*
return 10;          // error: return statement outside function

if (true) {
    return 20;      // error: return statement outside function
}

while (true) {
    return 30;      // error: return statement outside function
}

for(var i = 0; i < 10; i = i + 1) {
    if (i == 5) {
        return i;  // error: return statement outside function
    }
}

{
    return 40;      // error: return statement outside function
}
*/

fun test() {
    return 50;      // ok: return statement inside function
}

print test();       // Output: 50


fun add(a, b) {
    return a + b;
}
print add(1, 2);    // Output: 3


fun outer() {
    fun inner() {
        return 60;  // ok: return statement inside nested function
    }
    return inner(); // ok: return statement returns value of inner function
}
print outer();      // Output: 60


fun outer(o) {
    var result = 0;
    for(var i = 0; i < o; i = i + 1) {
        result = result + i;
    }

    return result;           // ok: return statement inside outer function
}

print outer(10);     // Output: 45

fun inner(i) {
    if (i > 5 ) {
        return 0;  
    } else {
        return 1;
    }
}

fun outer(o) {

    var result = 0;
    for(var i = 0; i < o; i = i + 1) {
        var j = i;
        while (j > 5) {
            j = inner(j) + inner(j-1);
        }
        result = result + j;
    }
    return result;           // ok: return statement inside outer function
}

print outer(10);     // Output: 30

fun fn(a, b) {
    return a + b;
}

fun re_fun() {
    return fn;    // ok: return function reference
}
print re_fun;
var f = re_fun(); // fn
print f(1, 2);    // Output: 3

// print f == fn;    // Output: true , todo: not implemented yet.
