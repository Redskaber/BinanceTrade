// This is a test file for variable types in Rust.

/*
fn main() {
    var a: i32 = 10;
    var b: f64 = 3.14;
    print a;
    print b;

    var c: bool = true;
    print c;

    var d: str = "Hello, world!";
    print d;

    var e = null;
    print e;

    var f: Fn = |x| x + 1;
    print f(10);

    // class create default type
    class A {}
    // class B {}
    var g: A = A;       // success
    // var h: A = B;    // error: expected type `class(A)`, found type `class(B)`
    print g;

    // var i: fn(i32,i32) -> i32 = |a: i32, b: i32| -> i32 { a + b };
    // print i(1, 2);

    class Point {
        var x: i32;
        var y: i32;
    }

    var j: Point = Point();
    print j;

    j.x = 10;
    j.y = 20;
    print j;
}

main();

fn counter(name: str, n: i32) -> i32 {
    print name;
    return n + 1;
}
*/

fn main() {
    var a: i32 = 10;
    var b: f64 = 3.14;
    var c: bool = true;
    var d: str = "Hello, world!";
    var e = null;
    var f: Fn(i32) -> i32 = |x: i32| -> i32 { 
        return x + 1;               // return type check?
    };

    fn counter(name: str, n: i32) -> i32 {
        print f(n);
        return n + 1;
    }

    var g: Fn(str, i32) -> i32 = counter;
    print g("Hello, world!", 10);

    var h: i32 = counter("Hello, world!", 10);
    print h;
    print f(10);

    fn local_fn() -> i32 {
        var i: i32 = 10;
        var f: Fn(i32) -> i32 = |x: i32| -> i32 {
            return x + i;
        };
        print f(20);
    }

    local_fn();
}

main();

/*
type_env: RefCell {
    value: [
        RefCell {
            value: {},
        },
        RefCell {
            value: {
                "c": Bool,
                "a": I32,
                "f": Fn {
                    params: Some(
                        [
                            Normal {
                                param: Token(ttype: Identifier, lexeme: "x", literal: Literal(Null), line: 59),
                                type_: I32,
                            },
                        ],
                    ),
                    return_type: Some(
                        I32,
                    ),
                },
                "g": Fn {
                    params: Some(
                        [
                            Normal {
                                param: Token(ttype: Identifier, lexeme: "name", literal: Literal(Null), line: 63),
                                type_: Str,
                            },
                            Normal {
                                param: Token(ttype: Identifier, lexeme: "n", literal: Literal(Null), line: 63),
                                type_: I32,
                            },
                        ],
                    ),
                    return_type: Some(
                        I32,
                    ),
                },
                "e": Null,
                "h": I32,
                "b": F64,
                "d": Str,
                "local_fn": Fn {
                    params: None,
                    return_type: None,
                },
                "counter": Fn {
                    params: Some(
                        [
                            Normal {
                                param: Token(ttype: Identifier, lexeme: "name", literal: Literal(Null), line: 63),
                                type_: Str,
                            },
                            Normal {
                                param: Token(ttype: Identifier, lexeme: "n", literal: Literal(Null), line: 63),
                                type_: I32,
                            },
                        ],
                    ),
                    return_type: Some(
                        I32,
                    ),
                },
            },
        },
    ],
}
*/
